" plugins
let need_to_install_plugins = 0
if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    let need_to_install_plugins = 1
endif

call plug#begin()
Plug 'tpope/vim-sensible'
Plug 'itchyny/lightline.vim'
Plug 'joshdick/onedark.vim'
Plug 'ap/vim-buftabline'
Plug 'airblade/vim-gitgutter'
Plug 'preservim/nerdtree'
Plug 'jistr/vim-nerdtree-tabs'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'jiangmiao/auto-pairs'
Plug 'dense-analysis/ale'
Plug 'majutsushi/tagbar'
Plug 'vim-scripts/indentpython.vim'
Plug 'lepture/vim-jinja'
Plug 'pangloss/vim-javascript'
Plug 'alvan/vim-closetag'
Plug 'maxmellon/vim-jsx-pretty'
Plug 'tpope/vim-surround'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'fatih/vim-go'
call plug#end()

if need_to_install_plugins == 1
    echo "Installing plugins..."
    silent! PlugInstall
    echo "Done!"
    q
endif

" always show the status bar
set laststatus=2

" enable 256 colors
set t_Co=256
set t_ut=

" turn on line numbering
set number

" sane text files
set fileformat=unix
set encoding=utf-8
set fileencoding=utf-8

" sane editing
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab
set viminfo='25,\"50,n~/.viminfo
autocmd FileType html setlocal tabstop=2 shiftwidth=2 softtabstop=2
autocmd FileType css setlocal tabstop=2 shiftwidth=2 softtabstop=2
autocmd FileType javascript setlocal tabstop=2 shiftwidth=2 softtabstop=2

" auto-pairs
au FileType python let b:AutoPairs = AutoPairsDefine({"f'" : "'", "r'" : "'", "b'" : "'"})

" set leader key
map <Space> <Leader>

" word movement
imap <S-Left> <Esc>bi
nmap <S-Left> b
imap <S-Right> <Esc><Right>wi
nmap <S-Right> w

" indent/unindent with tab/shift-tab
nmap <Tab> >>
nmap <S-tab> <<
imap <S-Tab> <Esc><<i
vmap <Tab> >gv
vmap <S-Tab> <gv

" mouse
set mouse=a
let g:is_mouse_enabled = 1
noremap <silent> <Leader>m :call ToggleMouse()<CR>
function ToggleMouse()
    if g:is_mouse_enabled == 1
        echo "Mouse OFF"
        set mouse=
        let g:is_mouse_enabled = 0
    else
        echo "Mouse ON"
        set mouse=a
        let g:is_mouse_enabled = 1
    endif
endfunction

" color scheme
syntax on
colorscheme onedark
filetype on
filetype plugin indent on

" fzf
nnoremap <C-f> :Files<CR>
nnoremap <leader>b :BLines<CR>
nnoremap <leader>l :Lines<CR>
" map <leader>c :Tags<CR>
nnoremap <leader>c :Ag<CR>
nnoremap <leader>; :Buffers<CR>
nnoremap <C-s> :w<CR>

" lightline
set noshowmode
let g:lightline = { 'colorscheme': 'onedark' }

" code folding
set foldmethod=indent
set foldlevel=99

" wrap toggle
setlocal nowrap
noremap <silent> <Leader>w :call ToggleWrap()<CR>
function ToggleWrap()
    if &wrap
        echo "Wrap OFF"
        setlocal nowrap
        set virtualedit=all
        silent! nunmap <buffer> <Up>
        silent! nunmap <buffer> <Down>
        silent! nunmap <buffer> <Home>
        silent! nunmap <buffer> <End>
        silent! iunmap <buffer> <Up>
        silent! iunmap <buffer> <Down>
        silent! iunmap <buffer> <Home>
        silent! iunmap <buffer> <End>
    else
        echo "Wrap ON"
        setlocal wrap linebreak nolist
        set virtualedit=
        setlocal display+=lastline
        noremap  <buffer> <silent> <Up>   gk
        noremap  <buffer> <silent> <Down> gj
        noremap  <buffer> <silent> <Home> g<Home>
        noremap  <buffer> <silent> <End>  g<End>
        inoremap <buffer> <silent> <Up>   <C-o>gk
        inoremap <buffer> <silent> <Down> <C-o>gj
        inoremap <buffer> <silent> <Home> <C-o>g<Home>
        inoremap <buffer> <silent> <End>  <C-o>g<End>
    endif
endfunction

" move through split windows
nmap <leader><Up> :wincmd k<CR>
nmap <leader><Down> :wincmd j<CR>
nmap <leader><Left> :wincmd h<CR>
nmap <leader><Right> :wincmd l<CR>

" move through buffers
nmap <leader>[ :bp!<CR>
nmap <leader>] :bn!<CR>
nmap <leader>x :bd<CR>

" restore place in file from previous session
autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

" file browser
let NERDTreeIgnore = ['\.pyc$', '__pycache__']
let NERDTreeMinimalUI = 1
let g:nerdtree_open = 0
map <leader>n :call NERDTreeToggle()<CR>
function NERDTreeToggle()
    NERDTreeTabsToggle
    if g:nerdtree_open == 1
        let g:nerdtree_open = 0
    else
        let g:nerdtree_open = 1
        wincmd p
    endif
endfunction

function! StartUp()
    if 0 == argc()
        " NERDTree
    end
endfunction
autocmd VimEnter * call StartUp()

" ale
map <C-e> <Plug>(ale_next_wrap)
map <C-r> <Plug>(ale_previous_wrap)

" tags
map <leader>t :TagbarToggle<CR>

" copy, cut and paste
vmap <C-c> "+y
vmap <C-x> "+c
vmap <C-v> c<ESC>"+p
imap <C-v> <ESC>"+pa

" disable autoindent when pasting text
" source: https://coderwall.com/p/if9mda/automatically-set-paste-mode-in-vim-when-pasting-in-insert-mode
let &t_SI .= "\<Esc>[?2004h"
let &t_EI .= "\<Esc>[?2004l"

function! XTermPasteBegin()
    set pastetoggle=<Esc>[201~
    set paste
    return ""
endfunction

inoremap <special> <expr> <Esc>[200~ XTermPasteBegin()
inoremap jk <esc>

if has("gui_running")
    if has("gui_macvim")
        " set guifont=Victor\ Mono:h15
        set guifont=Monoid\ Retina:h14
        set macmeta
        set transparency=10
    endif
    if has("gui_gtk")
        set guifont=Consolas\ 13
    endif
    set guioptions-=T
endif
"colorscheme zellner
set hidden
set bg=dark
setlocal wildignore=*.pyc
setlocal path=.,**

"set colorcolumn=+1
highlight OverLength ctermbg=red ctermfg=white guibg=Cyan
set textwidth=120
set cursorline
set splitright splitbelow
au FileType python match OverLength /\%121v.\+/

let g:ale_python_flake8_executable = expand('~') . '/.virtualenvs/p3/bin/flake8'
let g:ale_python_flake8_use_global = 1
let g:ale_python_flake8_options = '--max-line-length 120'
"let g:ale_python_yapf_executable = expand('~') . '/.virtualenvs/p3/bin/yapf'
"let g:ale_python_yapf_use_global = 1
let g:ale_python_autopep8_executable = expand('~') . '/.virtualenvs/p3/bin/autopep8'
let g:ale_python_autopep8_use_global = 1
let g:ale_python_autopep8_options = '--max-line-length 120'
let g:ale_python_reorder_python_imports_executable = expand('~') . '/.virtualenvs/p3/bin/reorder-python-imports'
let g:ale_python_reorder_python_imports_use_global = 1
let g:ale_fix_on_save = 1
let g:ale_linters = { 'python': ['flake8'] }
let g:ale_fixers = {
            \ '*': ['remove_trailing_lines', 'trim_whitespace'],
            \ 'python': ['autopep8', 'reorder-python-imports']
            \}

" terminal fix for M-b M-f
tmap <expr> <M-b> SendToTerm("\<Esc>b")
tmap <expr> <M-f> SendToTerm("\<Esc>f")
func SendToTerm(what)
    call term_sendkeys('', a:what)
    return ''
endfunc

" set cursor color
highlight Cursor guifg=black guibg=cyan
set guicursor+=i:blinkon0 guicursor+=n-v-c:blinkon0
highlight Visual ctermbg=114


" custom functions
"
" search for the term under your cursor
function VSearch()
    normal! "kyiw
    execute "normal! :Ag \<C-R>k\<CR>"
endfunction
noremap <leader>s :call VSearch()<CR>

let g:is_transparent = 1
highlight Normal ctermbg=NONE
noremap <silent> <Leader>j :call ToggleTransparency()<CR>
function ToggleTransparency()
    if g:is_transparent == 1
        highlight Normal ctermbg=235
        let g:is_transparent = 0
        echom "Disable transparency"
    else
        let g:is_transparent = 1
        highlight Normal ctermbg=NONE
        echom "Enable Transparency"
    endif
endfunction

" custom insert mode map
inoremap <C-a> <Esc>^i
inoremap <C-b> <Esc>Bi
inoremap <C-f> <Esc>lWi
inoremap <C-k> <Esc>ki
inoremap <C-j> <Esc>ji
inoremap <M-x> <Esc>:
inoremap <M-f> <Esc>/\v
inoremap <M-s> <Esc>:call VSearch()<CR>i
nnoremap <leader>ev :vsplit $MYVIMRC<CR>
nnoremap <leader>' :terminal ++rows=10<CR>

function QuitWithMsg()
    echo('Quit...')
    sleep 500m
    quit
endfunction

nnoremap <leader>q :call QuitWithMsg()<CR>
